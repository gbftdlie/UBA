
CAGAN

Based on CRFill (https://github.com/zengxianyu/crfill), the CaGAN module performs the adversarial contextual reconstruction on the sensitive regions found by ODHU.

The core of the CaGAN module is to add our UBA loss to the CaGAN generator to achieve adversarial example generation, which is coded in models/networks/loss.py.

Since the output format of each object detection model is not consistent, we implemented a separate class for each surrogate object detection model to carry the forward function.
Here is an example of this class on Faster R-CNN.

class FasterRCNNLoss(nn.Module):
    def __init__(self):
        super(FasterRCNNLoss, self).__init__()
        self.model = FasterrcnnResnet50()

    def forward(self, composed_image, real_image, lambda_iou, cls_id_attacked):
        max_prob1, bboxes1 = self.model.detect(tensor_image_inputs=composed_image, cls_id_attacked=int(cls_id_attacked))
        max_prob2, bboxes2 = self.model.detect(tensor_image_inputs=real_image, cls_id_attacked=int(cls_id_attacked))

        #no gt box/dt box
        if(bboxes2[0].shape[0] == 0 or bboxes1[0].shape[0] == 0):
            return torch.tensor(0.), torch.tensor(0.), 0.

        #multi-objects scenarioï¼Œcalc iou of all dt box and gt box for each gt box
        gt_max_iou_values_ = []
        gt_max_iou_values = 0.
        for i in range(bboxes2[0].shape[0]):
            if(bboxes2[0][i].shape[0] == 0):
                continue
            dt_bboxes = bboxes1[0][:][0:4]
            gt_bbox = bboxes2[0][i][0:4]
            iou_value = IOU(dt_bboxes, gt_bbox)
            gt_max_iou_value = torch.max(iou_value).item()
            gt_max_iou_values_.append(gt_max_iou_value)
            gt_max_iou_values += gt_max_iou_value

        mean_gt_max_iou_values = gt_max_iou_values/len(gt_max_iou_values_)    #max iou of gt box1 and all dt box
        total_value = mean_gt_max_iou_values * lambda_iou + max_prob1*(1-lambda_iou)
        max_iou_value = max(gt_max_iou_values_)
        return total_value, max_prob1, max_iou_value
        
        
     
     
     
     
     
     
     For InpaintModel initialization, the UBA loss initialization is added to : __init__ function of InpaintModel Class  in crfill/models/inpaint_model.py  
      At the end of the "set loss functions" comment in line 42, add the corresponding UBA loss by model type:
      
      
        if opt.isTrain:
            self.mask_creator = MaskCreator(opt.path_objectshape_list, opt.path_objectshape_base)
            self.criterionGAN = networks.GANLoss(
                opt.gan_mode, tensor=self.FloatTensor, opt=self.opt)
            self.criterionFeat = torch.nn.L1Loss()
            if not opt.no_vgg_loss:
                self.criterionVGG = networks.VGGLoss(self.opt.gpu_ids)

            if(self.opt.netA == 'yolov4'):
                self.criterionYolov4 = networks.Yolov4Loss()
            if(self.opt.netA == 'fasterrcnn'):
                self.criterionFasterRCNN = networks.FasterRCNNLoss()
            if(self.opt.netA == 'yolov2'):
                self.criterionYolov2 = networks.Yolov2Loss()
            
            if(self.opt.netA == 'ssd'):
                self.criterionSSD = networks.SSDLoss()
                
     
     
     
     
     Finally,   the UBA loss is  added to CaGAN generator loss in  g_image_loss  function:
        
                if not self.opt.no_gan_adv_loss:
            G_losses['GAN_Adv'] = 0
            adv_num = 0
            if(self.opt.netA == 'yolov4'):
                max_prob_obj_cls = self.criterionYolov4(composed_image, self.opt.cls_id_attacked)
            elif(self.opt.netA == 'fasterrcnn'):
                total_value, max_prob1, max_iou_value = self.criterionFasterRCNN(composed_image, real_image, self.opt.lambda_iou, self.opt.cls_id_attacked)
                G_losses['GAN_Adv'] = total_value
                return G_losses
            elif(self.opt.netA == 'yolov2'):
                max_prob_obj_cls = self.criterionYolov2(composed_image, self.opt.cls_id_attacked)
            elif(self.opt.netA == 'ssd'):
                total_value, max_prob1, max_iou_value = self.criterionSSD(composed_image, real_image, self.opt.lambda_iou, self.opt.cls_id_attacked)
                G_losses['GAN_Adv'] = total_value
                return G_losses
            else:
                print('netA is')

            for prob in max_prob_obj_cls:
                if(prob) < 0.4:
                    continue
                else:
                    G_losses['GAN_Adv'] += prob * self.opt.lambda_adv
                    adv_num += 1
            
            if(adv_num > 0):
                G_losses['GAN_Adv'] /= adv_num
            else:
                G_losses['GAN_Adv'] = torch.tensor(0.)

        return G_losses
        
        
        
                
                
